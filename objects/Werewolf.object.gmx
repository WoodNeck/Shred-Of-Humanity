<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>WolfIdleS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wolfBar = noone;
timeHUD = noone;
victim = noone;

if (irandom(1) == 0) {
    audio_play_sound(HowlSnd, 1, false);
} else {
    audio_play_sound(HowlSnd2, 1, false);
}

xInput = 0;
yInput = 0;
kills = 0;
normalSpeed = 3;
moveSpeed = normalSpeed;
attackCount = 0;
attackTarget = noone;
jumpHeight = 0;
jumpTime = 0;
jumpPosX = 0;
jumpPosY = 0;
maxJumpTime = 10;
humanityCooldown = 0.5;
sculptCounter = 0;
noAnim = false;

state = WolfState.RUN;
movePosX = TILE_WIDTH * floor(x / TILE_WIDTH) + TILE_WIDTH / 2;
movePosY = TILE_HEIGHT * floor(y / TILE_HEIGHT) + TILE_HEIGHT / 2;

InitGrid();
victim = FindVictim();
pathToVictim = path_add();

sprite[0] = WolfIdleS;
sprite[1] = WolfRunS;
sprite[2] = WolfIdleS;
sprite[3] = WolfJumpS;
sprite[4] = WolfDieS;
sprite[5] = WolfAttackS;
sprite[6] = WolfSculptS;
sprite[7] = WolfRunS;

attackSnd[0] = WolfAttackSnd;
attackSnd[1] = WolfAttackSnd2;
attackSnd[2] = WolfAttackSnd3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>noAnim = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SCULPT END</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// SCULPT END
if (state != WolfState.DIE) {
    if (victim.object_index == Meat) instance_destroy(victim);
    victim = noone;
    ChooseNextVictim();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var viewX = x - view_wview[0] / 2;
var viewY = y - view_hview[0] / 2;
view_xview[0] = clamp(viewX, 0, room_width - view_wview[0]);
view_yview[0] = clamp(viewY, 0, room_height - view_hview[0]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xInput = 0;
yInput = 0;

if (window_has_focus()) {
    if (keyboard_check_direct(ord('W'))) yInput--;
    if (keyboard_check_direct(ord('A'))) xInput--;
    if (keyboard_check_direct(ord('S'))) yInput++;
    if (keyboard_check_direct(ord('D'))) xInput++;
}

if (abs(xInput) &gt; 0 &amp;&amp; abs(yInput) &gt; 0) {
    xInput *= 0.707;
    yInput *= 0.707;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == WolfState.IDLE) {
    ChooseNextVictim();
    if (victim != noone) {
        ChaseVictim();
    }
} else if (state == WolfState.RUN) {
    ChaseVictim();
} else if (state == WolfState.STUNNED) {
    // DO NOTHING
} else if (state == WolfState.JUMP) {
    jumpTime += 1;
    if (jumpTime &gt; maxJumpTime) {
        KillVictim(victim);
        x = movePosX;
        y = movePosY;
        jumpHeight = 0;
    } else {
        x = jumpPosX + (movePosX - jumpPosX) * (jumpTime / maxJumpTime);
        y = jumpPosY + (movePosY - jumpPosY) * (jumpTime / maxJumpTime);
        jumpHeight = 10 * (1 - sqr((jumpTime / maxJumpTime) * 2 - 1));
    }
} else if (state == WolfState.DIE) {

} else if (state == WolfState.ATTACK) {
    AttackTarget();
} else if (state == WolfState.SCULPT) {
    sculptCounter += 1;
    if (sculptCounter % (room_speed / 2) == 0) {
        audio_play_sound(attackSnd[irandom(2)], 1, false);
        var gib = instance_create(victim.x, victim.y, Gib);
        gib.sprite = victim.gibSprite;
        gib.index = irandom(sprite_get_number(gib.sprite) - 1);
        gib.bleed = true;
        gib.height = 26 - 5 + irandom(10);
        gib.xSpeed = -5 + 10 * random(1);
        gib.ySpeed = -5 + 10 * random(1);
        gib.zSpeed = 5;
    }
} else if (state == WolfState.CONTROL) {
    wolfBar.percentage -= 1 / (room_speed * HUMANITY_TIME_FULL);
    if (wolfBar.percentage &lt;= 0) {
        wolfBar.percentage = 0;
        LoseControl();
    }
    
    var xSpeed = xInput * moveSpeed;
    var ySpeed = yInput * moveSpeed;
        
    if (place_free(x + xSpeed, y))
        x += xSpeed;
    if (place_free(x, y + ySpeed))
        y += ySpeed;
        
    if (abs(xSpeed) &gt; 0 || abs(ySpeed) &gt; 0) {
        sprite[WolfState.CONTROL] = sprite[WolfState.RUN];
    } else {
        sprite[WolfState.CONTROL] = sprite[WolfState.IDLE];
    }

    x = clamp(x, TILE_WIDTH / 2, room_width - TILE_WIDTH / 2);
    y = clamp(y, TILE_HEIGHT / 2, room_height - TILE_HEIGHT / 2);
        
    if (xInput &lt; 0) xScale = -1;
    else if (xInput &gt; 0) xScale = 1;
    
}
moveSpeed = normalSpeed;
humanityCooldown = max(0, humanityCooldown - 1 / room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!noAnim) {
    draw_sprite_ext(sprite[state], animIndex, x, y - jumpHeight, xScale, yScale, 0, c_white, 1);
} else {
    draw_sprite_ext(sprite[state], sprite_get_number(sprite[WolfState.DIE]) - 1, x, y, xScale, yScale, 0, c_white, 1);
}
//mp_grid_draw(grid);
//draw_path(pathToVictim, x, y, true);

if (state != WolfState.DIE) {
    var pathPointCnt = path_get_number(pathToVictim)
    for (var i = 0; i &lt; pathPointCnt - 1; i += 1) {
        currentPointX = path_get_point_x(pathToVictim, i);
        currentPointY = path_get_point_y(pathToVictim, i);
        nextPointX = path_get_point_x(pathToVictim, i + 1);
        nextPointY = path_get_point_y(pathToVictim, i + 1);
        draw_line(currentPointX, currentPointY, nextPointX, nextPointY);
    }
}

if (victim != noone &amp;&amp; state != WolfState.DIE) {
    if (victim.object_index == Meat) draw_sprite(ChaseIconS, 0, victim.x + 16, victim.y - 28);
    else if (victim.object_index == Civilian) {
        if (victim.type &lt;= CivilianType.WOMAN) draw_sprite(ChaseIconS, 0, victim.x, victim.y - 70);
        else draw_sprite(ChaseIconS, 0, victim.x, victim.y - 64);
    } else {
        draw_sprite(ChaseIconS, 0, victim.x, victim.y - 64);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != WolfState.JUMP &amp;&amp;
    state != WolfState.DIE &amp;&amp;
    state != WolfState.SCULPT &amp;&amp;
    state != WolfState.STUNNED) {
    if (wolfBar.percentage &gt; 0 &amp;&amp; humanityCooldown &lt;= 0) {
        ChangeWolfState(WolfState.CONTROL);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>LoseControl</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
