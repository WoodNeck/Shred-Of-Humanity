<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hero = noone;

state = HUDState.OPEN;

itemSprite[0] = Barricade1S;
itemSprite[1] = TrapS;
itemSprite[2] = MeatS;
itemSprite[3] = HumanityS;
itemSprite[4] = GlueS;

item[0] = BarricadeProxy;
item[1] = Trap;
item[2] = Meat;
item[3] = Humanity;
item[4] = Glue;

itemCnt[0] = 0;
itemCnt[1] = 0;
itemCnt[2] = 0;
itemCnt[3] = 0;
itemCnt[4] = 0;

itemSnd[0] = BarricadeInstallSnd;
itemSnd[1] = TrapInstallSnd;
itemSnd[2] = MeatInstallSnd;
itemSnd[3] = HumanityInsatllSnd;
itemSnd[4] = GlueInstallSnd;

itemRemoveSnd = ItemRemoveSnd;

selected = 0;
cursorX = 0;

yOffset = 0;
closedOffset = sprite_get_height(InventoryS) / 2 + 2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if      (keyboard_check_pressed(ord('1'))) selected = 0;
else if (keyboard_check_pressed(ord('2'))) selected = 1;
else if (keyboard_check_pressed(ord('3'))) selected = 2;
else if (keyboard_check_pressed(ord('4'))) selected = 3;
else if (keyboard_check_pressed(ord('5'))) selected = 4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == HUDState.CLOSING) {
    yOffset += 0.5;
    if (yOffset &gt; closedOffset) {
        yOffset = closedOffset;
        state = HUDState.CLOSED;
    }
}

if (cursorX != 40 * selected) {
    cursorX += sign(40 * selected - cursorX) * 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != HUDState.OPEN) exit;

if (sqr(mouse_x - hero.x) + sqr(mouse_y - hero.y) &lt;= sqr(TILE_WIDTH * 3)) {    
    var gridX = TILE_WIDTH * floor(mouse_x / TILE_WIDTH);
    var gridY = TILE_HEIGHT * floor(mouse_y / TILE_HEIGHT);
    var clickedItem = instance_position(gridX, gridY, Obstacle)
    if (clickedItem != noone &amp;&amp; clickedItem.custom) {
        var itemIndex;
        if (object_is_ancestor(clickedItem.object_index, Barricade)) itemIndex = 0;
        else if (clickedItem.object_index == Trap) itemIndex = 1;
        else if (clickedItem.object_index == Meat) itemIndex = 2;
        else if (clickedItem.object_index == Humanity) itemIndex = 3;
        else if (clickedItem.object_index == Glue) itemIndex = 4;
        
        audio_play_sound(itemRemoveSnd, 1, false);
        itemCnt[itemIndex] += 1;
        instance_destroy(clickedItem);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != HUDState.OPEN) exit;

if (sqr(mouse_x - hero.x) + sqr(mouse_y - hero.y) &lt;= sqr(TILE_WIDTH * 3)) {
    if (itemCnt[selected] &lt;= 0) exit;
    var gridX = TILE_WIDTH * floor(mouse_x / TILE_WIDTH);
    var gridY = TILE_HEIGHT * floor(mouse_y / TILE_HEIGHT);
    if (selected == 0 &amp;&amp;
        collision_rectangle(gridX, gridY, gridX + TILE_WIDTH, gridY + TILE_HEIGHT, Character, false, false) != noone) exit;
    if (instance_position(gridX, gridY, Obstacle) == noone) {
        var newItem = instance_create(gridX, gridY, item[selected]);
        if (selected != 0)
            newItem.custom = true;
        itemCnt[selected] -= 1;
        audio_play_sound(itemSnd[selected], 1, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var screenBottom = view_hview[0];

draw_sprite(InventoryS, 0, 0, screenBottom + yOffset);

draw_set_font(InventoryFont);

draw_set_halign(fa_right);
draw_set_valign(fa_bottom);

for (var i = 0; i &lt; 5; i += 1) {
    if (itemCnt[i] &gt; 0) {
        draw_sprite(itemSprite[i], 0, 4 + 40 * i, screenBottom - 32 + yOffset);
    } else {
        shader_set(GrayscaleShader);
        draw_sprite(itemSprite[i], 0, 4 + 40 * i, screenBottom - 32 + yOffset);
        shader_reset();
    }
    if (state == HUDState.OPEN) {
        //draw_set_color(c_black);
        //draw_text(36 + 40 * i, room_height + 1, string(itemCnt[i]));
        draw_set_color(c_white);
        draw_text(35 + 40 * i, screenBottom, string(itemCnt[i]));
    }
}

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

if (state == HUDState.OPEN)
    draw_sprite(ItemCursorS, 0, cursorX, screenBottom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != HUDState.OPEN) exit;

depth = -mouse_y;
if (sqr(mouse_x - hero.x) + sqr(mouse_y - hero.y) &lt;= sqr(TILE_WIDTH * 3)) {
    var gridX = TILE_WIDTH * floor(mouse_x / TILE_WIDTH);
    var gridY = TILE_HEIGHT * floor(mouse_y / TILE_HEIGHT);
    if (instance_position(gridX, gridY, Obstacle) == noone) {
        var itemColor;
        if (itemCnt[selected] &gt; 0) itemColor = c_blue;
        else itemColor = c_red;
        if (selected == 0 &amp;&amp; collision_rectangle(gridX, gridY, gridX + TILE_WIDTH, gridY + TILE_HEIGHT, Character, false, false) != noone)
            itemColor = c_red;
        draw_sprite_ext(itemSprite[selected], 0, gridX, gridY, 1, 1, 0, itemColor, 0.5);
        if (itemColor == c_blue) {
            draw_sprite(LeftClickIconS, 0, gridX + TILE_WIDTH / 2, gridY - TILE_HEIGHT);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
