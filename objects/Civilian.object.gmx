<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ManIdleS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = TILE_WIDTH * (x div TILE_WIDTH) + TILE_WIDTH / 2
y = TILE_HEIGHT * (y div TILE_HEIGHT) + TILE_HEIGHT / 2

type = irandom(3);

idleSprite[CivilianType.MAN] = ManIdleS;
idleSprite[CivilianType.WOMAN] = WomanIdleS;
idleSprite[CivilianType.SMALL_MAN] = SmallManIdleS;
idleSprite[CivilianType.SMALL_WOMAN] = SmallWomanIdleS;

runSprite[CivilianType.MAN] = ManRunS;
runSprite[CivilianType.WOMAN] = WomanRunS;
runSprite[CivilianType.SMALL_MAN] = SmallManRunS;
runSprite[CivilianType.SMALL_WOMAN] = SmallWomanRunS;


index = irandom(sprite_get_number(idleSprite[type]) - 1);
runImageNum = sprite_get_number(runSprite[type]) / sprite_get_number(idleSprite[type]);
runOffset = runImageNum * index;
animIndex = 0;
moveSpeed = 1;
state = CharState.IDLE;
movePosX = 0;
movePosY = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animIndex += 0.35;
if (animIndex &gt;= runImageNum) {
    animIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == CharState.IDLE) {
    if (irandom(30) &gt;= 1) exit;
    
    var availableDir = ds_list_create();
    if (place_free(x - TILE_WIDTH, y) &amp;&amp; x - TILE_WIDTH &gt; 0) ds_list_add(availableDir, Direction.WEST);
    if (place_free(x + TILE_WIDTH, y) &amp;&amp; x + TILE_WIDTH &lt; room_width) ds_list_add(availableDir, Direction.EAST);
    if (place_free(x, y - TILE_HEIGHT) &amp;&amp; y - TILE_HEIGHT &gt; 0) ds_list_add(availableDir, Direction.NORTH);
    if (place_free(x, y + TILE_HEIGHT) &amp;&amp; y + TILE_HEIGHT &lt; room_height) ds_list_add(availableDir, Direction.SOUTH);
    
    if (ds_list_size(availableDir) &gt; 0) {
        state = CharState.RUN;
        var nextDir = irandom(ds_list_size(availableDir) - 1)
        nextDir = ds_list_find_value(availableDir, nextDir);
        switch (nextDir) {
            case Direction.NORTH:
                movePosX = x;
                movePosY = y - TILE_HEIGHT;
                break;
            case Direction.SOUTH:
                movePosX = x;
                movePosY = y + TILE_HEIGHT;
                break;
            case Direction.WEST:
                movePosX = x - TILE_WIDTH;
                movePosY = y;
                break;
            case Direction.EAST:
                movePosX = x + TILE_WIDTH;
                movePosY = y;
                break;
        }
    }
    ds_list_destroy(availableDir);
} else if (state == CharState.RUN) {
    if (movePosX != x) x += sign(movePosX - x) * moveSpeed;
    if (movePosY != y) y += sign(movePosY - y) * moveSpeed;

    if (movePosX == x &amp;&amp; movePosY == y) {
        if (TimeHUD.state == TimeState.NIGHT) state = CharState.PANIC;
        else state = CharState.IDLE;
    }
    
    if (movePosX &lt; x) xScale = -1;
    else if (movePosX &gt; x) xScale = 1;
} else if (state == CharState.PANIC) {
    if (!instance_exists(Werewolf)) exit;

    var wolf = instance_find(Werewolf, 0);
    var availableDir = ds_list_create();
    if (place_free(x - TILE_WIDTH, y) &amp;&amp; x - TILE_WIDTH &gt; 0 &amp;&amp; wolf.x &gt; x) ds_list_add(availableDir, Direction.WEST);
    if (place_free(x + TILE_WIDTH, y) &amp;&amp; x + TILE_WIDTH &lt; room_width &amp;&amp; wolf.x &lt; x) ds_list_add(availableDir, Direction.EAST);
    if (place_free(x, y - TILE_HEIGHT) &amp;&amp; y - TILE_HEIGHT &gt; 0 &amp;&amp; wolf.y &gt; y) ds_list_add(availableDir, Direction.NORTH);
    if (place_free(x, y + TILE_HEIGHT) &amp;&amp; y + TILE_HEIGHT &lt; room_height &amp;&amp; wolf.y &lt; y) ds_list_add(availableDir, Direction.SOUTH);
    
    if (ds_list_size(availableDir) &gt; 0) {
        state = CharState.RUN;
        var nextDir = irandom(ds_list_size(availableDir) - 1)
        nextDir = ds_list_find_value(availableDir, nextDir);
        switch (nextDir) {
            case Direction.NORTH:
                movePosX = x;
                movePosY = y - TILE_HEIGHT;
                break;
            case Direction.SOUTH:
                movePosX = x;
                movePosY = y + TILE_HEIGHT;
                break;
            case Direction.WEST:
                movePosX = x - TILE_WIDTH;
                movePosY = y;
                break;
            case Direction.EAST:
                movePosX = x + TILE_WIDTH;
                movePosY = y;
                break;
        }
    }
    ds_list_destroy(availableDir);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == CharState.RUN)
    draw_sprite_ext(runSprite[type], runOffset + animIndex, x, y, xScale, yScale, 0, c_white, 1);
else
    draw_sprite_ext(idleSprite[type], index, x, y, xScale, yScale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
