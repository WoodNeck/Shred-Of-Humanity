<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveSpeed = 3;

state = GunmanState.IDLE;
noAnim = false;
movePosX = TILE_WIDTH * floor(x / TILE_WIDTH) + TILE_WIDTH / 2;
movePosY = TILE_HEIGHT * floor(y / TILE_HEIGHT) + TILE_HEIGHT / 2;

if (instance_exists(Werewolf)) {
    wolf = instance_find(Werewolf, 0);
}

InitGrid();
pathToWolf = path_add();
mp_grid_path(grid, pathToWolf,
                 TILE_WIDTH * floor(x / TILE_WIDTH) + TILE_WIDTH / 2,
                 TILE_HEIGHT * floor(y / TILE_HEIGHT) + TILE_HEIGHT / 2,
                 TILE_WIDTH * floor(wolf.x / TILE_WIDTH) + TILE_WIDTH / 2,
                 TILE_HEIGHT * floor(wolf.y / TILE_HEIGHT) + TILE_HEIGHT / 2, false);

sprite[0] = GunmanIdleS;
sprite[1] = GunmanRunS;
sprite[2] = GunmanShootS;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>noAnim = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == GunmanState.IDLE) {
    if (wolf.state != WolfState.DIE)
        state = GunmanState.RUN;
} else if (state == GunmanState.RUN) {
    var speedX = sign(movePosX - x) * moveSpeed;
    var speedY = sign(movePosY - y) * moveSpeed;
    
    var shouldMoveX = abs(movePosX - x) &gt; abs(speedX);
    var shouldMoveY = abs(movePosY - y) &gt; abs(speedY);
    
    if (sqr(wolf.x - x) + sqr(wolf.y - y) &lt; sqr(TILE_WIDTH)) {
        state = GunmanState.SHOOT;
        animIndex = 0;
        wolf.state = WolfState.DIE;
        wolf.animIndex = 0;
        wolf.alarm[1] = sprite_get_number(wolf.sprite[WolfState.DIE]) * room_speed / 16 * 10 / 7
    } else {
        if (shouldMoveX) x += speedX;
        if (shouldMoveY) y += speedY;
        if (shouldMoveX) {
            if (speedX &lt; 0) xScale = -1;
            else if (speedX &gt; 0) xScale = 1;
        }
        if (!shouldMoveX &amp;&amp; !shouldMoveY) {
            path_delete(pathToWolf);
            pathToWolf = path_add();
            mp_grid_path(grid, pathToWolf,
                             TILE_WIDTH * floor(x / TILE_WIDTH) + TILE_WIDTH / 2,
                             TILE_HEIGHT * floor(y / TILE_HEIGHT) + TILE_HEIGHT / 2,
                             TILE_WIDTH * floor(wolf.x / TILE_WIDTH) + TILE_WIDTH / 2,
                             TILE_HEIGHT * floor(wolf.y / TILE_HEIGHT) + TILE_HEIGHT / 2, false);
            movePosX = path_get_point_x(pathToWolf, 1);
            movePosY = path_get_point_y(pathToWolf, 1);
        }
    }
} else if (state == GunmanState.SHOOT) {
    if (!noAnim &amp;&amp; alarm[0] &lt;= 0) {
        alarm[0] = sprite_get_number(sprite[2]) * room_speed / 16 * 10 / 7;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!noAnim) {
    draw_sprite_ext(sprite[state], animIndex, x, y, xScale, yScale, 0, c_white, 1);
} else {
    draw_sprite_ext(sprite[state], sprite_get_number(sprite[state]) - 1, x, y, xScale, yScale, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
